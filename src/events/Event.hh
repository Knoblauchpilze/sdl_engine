#ifndef    EVENT_HH
# define   EVENT_HH

# include <memory>
# include <chrono>
# include <core_utils/Uuid.hh>
# include <core_utils/CoreObject.hh>

namespace sdl {
  namespace core {
    namespace engine {

      class Engine;
      class EngineObject;

      class Event: public utils::CoreObject {
        public:

          // Describes the available type of events.
          enum class Type {
            None,                //<! - Not an event
            Enter,               //<! - Mouse enter object's boundaries.
            FocusIn,             //<! - Object gains keyboard focus.
            FocusOut,            //<! - Object loses keyboard focus.
            GeometryUpdate,      //<! - The geometry of a component should be updated.
            Hide,                //<! - Object has been hidden.
            KeyPress,            //<! - One of the keyboard's keys has been pressed.
            KeyRelease,          //<! - One of the keyboard's keys has been released.
            Leave,               //<! - Mouse leaves the object's boundaries.
            MouseButtonPress,    //<! - One of the mouse button has been pressed.
            MouseButtonRelease,  //<! - One of the mouse button has been released.
            MouseMove,           //<! - The mouse cursor has been moved.
            MouseWheel,          //<! - The mouse wheel has been used.
            Refresh,             //<! - Trigger a refrech operation for a component.
            Repaint,             //<! - Trigger a repaint operation for a component.
            Resize,              //<! - Size of the component has been modified.
            Show,                //<! - Object is now visible.
            WindowEnter,         //<! - Mouse leaves the window's boundaries.
            WindowLeave,         //<! - Mouse leaves the window's boundaries.
            WindowResize,        //<! - Size of window has been modified.
            Quit,                //<! - Main application was closed.
            ZOrderChanged        //<! - The z order for a component has changed.
          };

          static
          std::string
          getNameFromType(const Type& type) noexcept;

          static
          std::string
          getNameFromEvent(const Event& e) noexcept;

          static
          std::string
          getNameFromEvent(const std::shared_ptr<Event> e) noexcept;

        public:

          Event(const Type& type = Type::None,
                EngineObject* receiver = nullptr,
                const std::string& name = std::string("event"));

          ~Event();

          bool
          operator==(const Event& other) const noexcept;

          bool
          operator!=(const Event& other) const noexcept;

          bool
          isAccepted() const noexcept;

          void
          accept() const noexcept;

          void
          ignore() const noexcept;

          Type
          getType() const noexcept;

          std::chrono::time_point<std::chrono::steady_clock>
          getTimestamp() const noexcept;

          /**
           * @brief - Retrieves the assigned receiver for this event. If the value is not null
           *          the event will be dispatched only to this object, otherwise it will be
           *          transmitted to all the registered listeners.
           * @return - a pointer to the object to which the event is directed. If the returned
           *           value is null the event will be propagated to all listeners.
           */
          EngineObject*
          getReceiver() const noexcept;

          /**
           * @brief - Assigns the input `receiver` object as receiver of this event.
           *          Note that the input value can be null and is not checked for
           *          that. Proceeding with a null input pointer will transform the
           *          event into an undirected event.
           * @param receiver - the receiver object to which this event is directed.
           */
          void
          setReceiver(EngineObject* receiver) noexcept;

          /**
           * @brief - Returns true if the event is directed to a particular object.
           *          Kinda equivalent to `getReceiver() == nullptr`.
           * @return -  true if this event is directed towards a specific object,
           *            false otherwise.
           */
          bool
          isDirected() const noexcept;

          /**
           * @brief - Retrieves the assigned emitter for this event. Note that the
           *          returned pointer might be null if the event is spontaneous.
           * @return - a pointer to the object which spawned this event or null if
           *           the event is spontaneous (i.e. generated by the system).
           */
          EngineObject*
          getEmitter() const noexcept;

          /**
           * @brief - Assigns the input `emitter` object as emitter of this event.
           *          Note that the input value can be null and is not checked for
           *          that. Proceeding with a null input pointer will transform the
           *          event into a spontaneous event.
           * @param emitter - the emitter object which spawned this event.
           */
          void
          setEmitter(EngineObject* emitter) noexcept;

          /**
           * @brief - An event is considered spontaneous when there's no associated
           *          emitter, which means it has probably be emitted by the events
           *          system and not by a specific object.
           *          Kinda equivalent to `getEmitter() == nullptr`.
           * @return - true if this event has not been spawned by a specific object,
           *           false otherwise.
           */
          bool
          isSpontaneous() const noexcept;

          bool
          hasSDLWinID() const noexcept;

          std::uint32_t
          getSDLWinID() const noexcept;

          const utils::Uuid&
          getWindID() const noexcept;

          void
          setWindowID(const utils::Uuid& uuid) noexcept;

          virtual void
          populateFromEngineData(Engine& engine);

        protected:

          void
          setAccepted(const bool accepted) const noexcept;

          void
          setType(const Type& type) noexcept;

          void
          setSDLWinID(const std::uint32_t& sdlWinID) noexcept;

          virtual bool
          equal(const Event& other) const noexcept;

        private:

          mutable bool m_accepted;
          Type m_type;
          bool m_hasWinID;
          utils::Uuid m_winID;
          std::uint32_t m_sdlWinID;
          EngineObject* m_receiver;
          EngineObject* m_emitter;

          std::chrono::time_point<std::chrono::steady_clock> m_timestamp;

      };

      using EventShPtr = std::shared_ptr<Event>;
    }
  }
}

# include "Event.hxx"

#endif    /* EVENT_HH */
